from datetime import datetime, timezone, timedelta

from aiogram.types import Message, CallbackQuery
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from db import DB
from fsm.fsm import FSMAdmin
from filters.is_admin import isAdminFilter
from config.config import config
from keyboards.keyboards import create_admin_kb

router_adm = Router()


async def report_money_in_range(date_from: str, date_to: str, msg: Message):
    rows = DB.get_statistics_money(
        date_from=date_from,
        date_to=date_to
    )

    year_from, month_from, day_from = date_from.split(".")
    year_to, month_to, day_to = date_to.split(".")

    places = {
        "–†—è–∑–∞–Ω–∫–∞ –∫–æ–º–Ω–∞—Ç–∞": sum([row[0].count("–†—è–∑–∞–Ω–∫–∞ –∫–æ–º–Ω–∞—Ç–∞") for row in rows]),
        "–†—è–∑–∞–Ω–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞": sum([row[0].count("–†—è–∑–∞–Ω–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞") for row in rows]),
        "–õ-153 –∫–æ–º–Ω–∞—Ç–∞": sum([row[0].count("–õ-153 –∫–æ–º–Ω–∞—Ç–∞") for row in rows]),
        "–õ-153 –ø–ª–æ—â–∞–¥–∫–∞": sum([row[0].count("–õ-153 –ø–ª–æ—â–∞–¥–∫–∞") for row in rows]),
        "–û–±–ª–∞–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞": sum([row[0].count("–û–±–ª–∞–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞") for row in rows]),
        "–ß–µ—Ä–Ω–∞—è –≥—Ä—è–∑—å –∫–æ–º–Ω–∞—Ç–∞": sum([row[0].count("–ß–µ—Ä–Ω–∞—è –≥—Ä—è–∑—å –∫–æ–º–Ω–∞—Ç–∞") for row in rows]),
        "–ò—é–Ω—å –ø–ª–æ—â–∞–¥–∫–∞": sum([row[0].count("–ò—é–Ω—å –ø–ª–æ—â–∞–¥–∫–∞") for row in rows]),
        "–ö–æ—Å–∏–Ω–æ –ø–∞—Ä–∫ –ø–ª–æ—â–∞–¥–∫–∞": sum([row[0].count("–ö–æ—Å–∏–Ω–æ –ø–∞—Ä–∫ –ø–ª–æ—â–∞–¥–∫–∞") for row in rows]),
        "–ì–æ—Ä–æ–¥ –ö–æ—Å–∏–Ω–æ –∫–∞—Ä—É—Å–µ–ª—å+–ø–ª–æ—â–∞–¥–∫–∞": sum([row[0].count("–ì–æ—Ä–æ–¥ –ö–æ—Å–∏–Ω–æ –∫–∞—Ä—É—Å–µ–ª—å+–ø–ª–æ—â–∞–¥–∫–∞") for row in rows]),
        "–í–∞—Ä—à–∞–≤—Å–∫–∏–π –∫–æ–º–Ω–∞—Ç–∞": sum([row[0].count("–í–∞—Ä—à–∞–≤—Å–∫–∏–π –∫–æ–º–Ω–∞—Ç–∞") for row in rows]),
    }

    report = f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—Ö–æ–¥—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –Ω–∞ —Ç–æ—á–∫–∞—Ö\n<b>–æ—Ç</b> {day_from}.{month_from}.{year_from}" \
             f" <b>–¥–æ</b> {day_to}.{month_to}.{year_to}\n\n"
    index_place = 0
    index_rows = 0

    for key in sorted(places.keys()):
        if places[key]:
            report += f"–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞: <b>{rows[index_place][0]}</b>\n"

            for i in range(places[key]):
                report += f"üìù–†–∞–±–æ—Ç–Ω–∏–∫: <em>{rows[index_rows][1]}</em>\n‚îî"
                report += f"–≤—ã—Ä—É—á–∫–∞: <em>{rows[index_rows][3]}</em> <b>‚ÇΩ</b>\n"

                index_rows += 1

            report += "\n"
            index_place += places[key]

    total_money = DB.get_total_money(
        date_from=date_from,
        date_to=date_to
    )

    await msg.answer(
        text=f"{report}"
             f"üí∞–°—É–º–º–∞—Ä–Ω–æ –¥–µ–Ω–µ–≥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:\n‚îî<em>{total_money}</em> <b>‚ÇΩ</b>",
        parse_mode="html",
        reply_markup=await create_admin_kb(),
    )


@router_adm.message(Command(commands="stats"), isAdminFilter(config.admins))
async def get_money_menu(message: Message, state: FSMContext):
    await state.set_state(FSMAdmin.money)
    await message.answer(
        text="üíµ–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
        reply_markup=await create_admin_kb(),
    )


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.money), F.data == "last_week")
async def get_stats_week_money(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=7)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        await report_money_in_range(date_from.strftime("%Y.%m.%d"), date_to.strftime("%Y.%m.%d"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(
            text=f"Get stats-money last week error: {e}\n"
                 f"User_id: {callback.message.from_user.id}",
            chat_id=config.admins[0],
        )
        await callback.message.answer(
            text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                 "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                 "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
            parse_mode="html",
        )


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.money), F.data == "last_month")
async def get_stats_month_money(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=30)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        await report_money_in_range(date_from.strftime("%Y.%m.%d"), date_to.strftime("%Y.%m.%d"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(
            text=f"Get stats-money last month error: {e}\n"
                 f"User_id: {callback.message.from_user.id}",
            chat_id=config.admins[0],
        )
        await callback.message.answer(
            text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                 "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                 "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
            parse_mode="html",
        )


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.money), F.data == "last_year")
async def get_stats_year_money(callback: CallbackQuery, bot: Bot):
    try:
        date_to = datetime.now(tz=timezone(timedelta(hours=3.0)))
        date_from = date_to - timedelta(days=365)

        await callback.answer(text="‚è≥")

        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )

        await report_money_in_range(date_from.strftime("%Y.%m.%d"), date_to.strftime("%Y.%m.%d"), callback.message)
    except Exception as e:
        await callback.message.bot.send_message(
            text=f"Get stats-money last year error: {e}\n"
                 f"User_id: {callback.message.from_user.id}",
            chat_id=config.admins[0],
        )
        await callback.message.answer(
            text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                 "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                 "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
            parse_mode="html",
        )


@router_adm.callback_query(isAdminFilter(config.admins), StateFilter(FSMAdmin.money), F.data == "by_hand")
async def prepare_for_get_stats_money_by_hand(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(FSMAdmin.money_by_hand)
    await callback.answer(text="üëåüèª")
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
    )
    await callback.message.answer(
        text="‚è≥–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>\n\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä: <em>31.12.2023 06.01.2024</em>",
        parse_mode="html",
    )


@router_adm.message(isAdminFilter(config.admins), StateFilter(FSMAdmin.money_by_hand), F.text)
async def get_stats_money_by_hand(message: Message, bot: Bot):
    try:
        date_from, date_to = message.text.split()
        day_from, month_from, year_from = date_from.split(".")
        day_to, month_to, year_to = date_to.split(".")

        await bot.delete_message(
            chat_id=message.from_user.id,
            message_id=message.message_id,
        )

        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,
        )

        await report_money_in_range(f"{year_from}.{month_from}.{day_from}",
                                    f"{year_to}.{month_to}.{day_to}", message)
    except Exception as e:
        await message.bot.send_message(
            text=f"Get stats-money by hand error: {e}\n"
                 f"User_id: {message.from_user.id}",
            chat_id=config.admins[0],
        )
        await message.answer(
            text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                 "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                 "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
            parse_mode="html",
        )


@router_adm.message(isAdminFilter(config.admins), StateFilter(FSMAdmin.money_by_hand))
async def warning_get_stats_money_by_hand(message: Message):
    await message.answer(
        text="‚è≥–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>\n\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä: <em>31.12.2023 06.01.2024</em>",
        parse_mode="html",
    )


@router_adm.callback_query(
    isAdminFilter(config.admins),
    F.data == "exit"
)
async def adm_cancel_command(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer(text="üëã")
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
    )
    await callback.message.answer(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    )
    await state.clear()
