from datetime import datetime, timezone, timedelta

from typing import Union

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, InputMediaPhoto, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters import StateFilter, Command

from db import DB
from fsm.fsm import FSMFinishShift
from lexicon.lexicon_ru import LEXICON_RU
from keyboards.keyboards import create_cancel_kb, create_places_kb, create_yes_no_kb
from middleware.album_middleware import AlbumsMiddleware
from config.config import place_chat, config

from decimal import Decimal
import re

router_finish = Router()
router_finish.message.middleware(middleware=AlbumsMiddleware(2))


async def report(dictionary: dict, date, user_id: Union[str, int]) -> str:
    return "üìù–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:\n\n"\
           f"–î–∞—Ç–∞: {date}\n" \
           f"–¢–æ—á–∫–∞: {dictionary['place']}\n" \
           f"–ò–º—è: {DB.get_current_name(user_id)}\n" \
           f"–õ—å–≥–æ—Ç–Ω–∏–∫–∏: {dictionary['beneficiaries']}\n" \
           f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {dictionary['summary']}\n" \
           f"–ù–∞–ª–∏—á–Ω—ã–µ: {dictionary['cash']}\n" \
           f"–ë–µ–∑–Ω–∞–ª: {dictionary['online_cash']}\n" \
           f"QR-–∫–æ–¥: {dictionary['qr_code']}\n" \
           f"–†–∞—Å—Ö–æ–¥: {dictionary['expenditure']}\n" \
           f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {dictionary['salary']}\n" \
           f"–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è: {dictionary['encashment']}\n\n" \
           f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø–æ—Å–µ—â–µ–Ω–∏—è: {dictionary['total_hours']}\n" \
           f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {dictionary['total_children']}\n\n" \
           f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∂–µ—Ç–æ–Ω–æ–≤: {dictionary['total_tokens']}\n" \
           f"–û—Å—Ç–∞—Ç–æ–∫ –∂–µ—Ç–æ–Ω–æ–≤: {dictionary['remaining_token']}\n\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–∞ –º–∞—à–∏–Ω–æ–∫ 5 –º–∏–Ω—É—Ç (7): {dictionary['count_cars_5']}\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–∞ –º–∞—à–∏–Ω–æ–∫ 10 –º–∏–Ω—É—Ç (20): {dictionary['count_cars_10']}\n\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—É—Å–µ–ª–∏: {dictionary['count_carousel']}\n\n" \
           f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤: {dictionary['count_master']}\n\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ –¥–æ–ø.—Ç–æ–≤–∞—Ä–∞: {dictionary['count_additional']}\n"


@router_finish.message(Command(commands="finish_shift"), StateFilter(default_state))
async def process_place_command(message: Message, state: FSMContext):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å",
        reply_markup=await create_places_kb(),
    )
    await state.set_state(FSMFinishShift.place)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_ryzanka_room")
async def process_place_1_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–†—è–∑–∞–Ω–∫–∞ –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_ryzanka_square")
async def process_place_2_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–†—è–∑–∞–Ω–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_153_room")
async def process_place_3_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–õ-153 –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_153_square")
async def process_place_4_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–õ-153 –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_cloud_square")
async def process_place_5_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–û–±–ª–∞–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_dirt_room")
async def process_place_6_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ß–µ—Ä–Ω–∞—è –≥—Ä—è–∑—å –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_june_square")
async def process_place_7_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ò—é–Ω—å –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_park_kosino")
async def process_place_8_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ö–æ—Å–∏–Ω–æ –ø–∞—Ä–∫ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_city_kosino")
async def process_place_9_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ì–æ—Ä–æ–¥ –ö–æ—Å–∏–Ω–æ –∫–∞—Ä—É—Å–µ–ª—å+–ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_varskva_room")
async def process_place_10_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–í–∞—Ä—à–∞–≤—Å–∫–∏–π –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMFinishShift.summary)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "cancel")
async def process_place_cancel_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove(),
    )
    await callback.answer(text="‚úÖ")
    await state.clear()


@router_finish.message(StateFilter(FSMFinishShift.place))
async def warning_place_command(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –Ω–∏–∂–µ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.summary), F.text)
async def process_summary_command(message: Message, state: FSMContext):
    money_message = message.text.lower()
    pattern = r'\b\w*—Ä—É–±–ª[—å—è–µ–π]?\w*\b'

    if "," in message.text:
        money_message = message.text.replace(",", ".")

    money_message = re.sub(pattern, '', money_message)

    await state.update_data(summary=str(Decimal(money_message)))
    await message.answer(
        text="–ë—ã–ª–∏ –ª–∏ –ª—å–≥–æ—Ç–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=await create_yes_no_kb(),
    )
    await state.set_state(FSMFinishShift.beneficiaries)


@router_finish.message(StateFilter(FSMFinishShift.summary))
async def warning_summary_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.callback_query(StateFilter(FSMFinishShift.beneficiaries), F.data == "yes")
async def process_beneficiaries_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(beneficiaries="yes")
    await callback.message.answer(
        text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–æ–¥—Ç–≤—Ä–µ–∂–¥–∞—é—â–µ–µ —Ñ–æ—Ç–æ (—Å–ø—Ä–∞–≤–∫–∞, –ø–∞—Å–ø–æ—Ä—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π)",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="‚úÖ")
    await state.set_state(FSMFinishShift.photo_of_beneficiaries)


@router_finish.callback_query(StateFilter(FSMFinishShift.beneficiaries), F.data == "no")
async def process_beneficiaries_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(beneficiaries="no")
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="‚úÖ")
    await state.set_state(FSMFinishShift.cash)


@router_finish.callback_query(StateFilter(FSMFinishShift.beneficiaries), F.data == "cancel")
async def process_beneficiaries_cancel_command(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove(),
    )
    await callback.answer(text="‚úÖ")


@router_finish.message(StateFilter(FSMFinishShift.photo_of_beneficiaries))
async def process_photo_beneficiaries_command(message: Message, state: FSMContext):
    if message.photo:
        if "photo_beneficiaries" not in await state.get_data():
            await state.update_data(photo_of_beneficiaries=[message.photo[-1].file_id])

        await message.answer(
            text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
            reply_markup=await create_cancel_kb(),
        )
        await state.set_state(FSMFinishShift.cash)
    else:
        await message.answer(
            text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–æ–¥—Ç–≤—Ä–µ–∂–¥–∞—é—â–µ–µ —Ñ–æ—Ç–æ (—Å–ø—Ä–∞–≤–∫–∞, –ø–∞—Å–ø–æ—Ä—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π)",
            reply_markup=await create_cancel_kb(),
        )


@router_finish.message(StateFilter(FSMFinishShift.cash), F.text)
async def process_cash_command(message: Message, state: FSMContext):
    await state.update_data(cash=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –±–µ–∑–Ω–∞–ª–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.online_cash)


@router_finish.message(StateFilter(FSMFinishShift.cash))
async def warning_cash_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.online_cash), F.text)
async def process_online_cash_command(message: Message, state: FSMContext):
    await state.update_data(online_cash=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ QR-–∫–æ–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.qr_code)


@router_finish.message(StateFilter(FSMFinishShift.online_cash))
async def warning_online_cash_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –±–µ–∑–Ω–∞–ª–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.qr_code), F.text)
async def process_qr_code_command(message: Message, state: FSMContext):
    await state.update_data(qr_code=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–Ω–æ –≤—ã—à–ª–æ –Ω–∞ —Ä–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.expenditure)


@router_finish.message(StateFilter(FSMFinishShift.qr_code))
async def warning_qr_code_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ QR-–∫–æ–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.expenditure), F.text)
async def process_expenditure_command(message: Message, state: FSMContext):
    await state.update_data(expenditure=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—ã –≤–∑—è–ª–∏ –ó–ü –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
             "–ï—Å–ª–∏ –≤—ã <b>–Ω–µ</b> –±—Ä–∞–ª–∏ –ó–ü, –Ω–∞–ø–∏—à–∏—Ç–µ 0",
        reply_markup=await create_cancel_kb(),
        parse_mode="html",
    )
    await state.set_state(FSMFinishShift.salary)


@router_finish.message(StateFilter(FSMFinishShift.expenditure))
async def warning_expenditure_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–Ω–æ –≤—ã—à–ª–æ –Ω–∞ —Ä–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.salary), F.text)
async def process_salary_command(message: Message, state: FSMContext):
    msg = message.text

    if msg == "0":
        await state.update_data(salary=msg)
    else:
        await state.update_data(salary=message.text)

    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏\n\n"
             "–ï—Å–ª–∏ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ <b>–Ω–µ—Ç</b>, –Ω–∞–ø–∏—à–∏—Ç–µ 0",
        reply_markup=await create_cancel_kb(),
        parse_mode="html",
    )
    await state.set_state(FSMFinishShift.encashment)


@router_finish.message(StateFilter(FSMFinishShift.salary))
async def warning_salary_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—ã –≤–∑—è–ª–∏ –ó–ü –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
             "–ï—Å–ª–∏ –≤—ã <b>–Ω–µ</b> –±—Ä–∞–ª–∏ –ó–ü, –Ω–∞–ø–∏—à–∏—Ç–µ 0",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.encashment), F.text)
async def process_encashment_command(message: Message, state: FSMContext):
    await state.update_data(encashment=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.total_hours)


@router_finish.message(StateFilter(FSMFinishShift.encashment))
async def warning_encashment_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏\n\n"
             "–ï—Å–ª–∏ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ <b>–Ω–µ—Ç</b>, –Ω–∞–ø–∏—à–∏—Ç–µ 0",
        reply_markup=await create_cancel_kb(),
        parse_mode="html",
    )


@router_finish.message(StateFilter(FSMFinishShift.total_hours), F.text)
async def process_total_hours_command(message: Message, state: FSMContext):
    await state.update_data(total_hours=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –∑–∞ –¥–µ–Ω—å",
        reply_markup=await create_cancel_kb()
    )
    await state.set_state(FSMFinishShift.total_children)


@router_finish.message(StateFilter(FSMFinishShift.total_hours))
async def warning_total_hours_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.total_children), F.text.isdigit())
async def process_total_child_command(message: Message, state: FSMContext):
    await state.update_data(total_children=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∂–µ—Ç–æ–Ω–æ–≤",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.total_tokens)


@router_finish.message(StateFilter(FSMFinishShift.total_children))
async def warning_total_child_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –∑–∞ –¥–µ–Ω—å",
        reply_markup=await create_cancel_kb()
    )


@router_finish.message(StateFilter(FSMFinishShift.total_tokens), F.text)
async def process_total_tokens_command(message: Message, state: FSMContext):
    await state.update_data(total_tokens=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –∂–µ—Ç–æ–Ω–æ–≤",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.remaining_tokens)


@router_finish.message(StateFilter(FSMFinishShift.total_tokens))
async def warning_total_tokens_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∂–µ—Ç–æ–Ω–æ–≤",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.remaining_tokens), F.text)
async def process_remaining_token_command(message: Message, state: FSMContext):
    await state.update_data(remaining_token=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–∞ –º–∞—à–∏–Ω–æ–∫ 5 –º–∏–Ω—É—Ç (7 –º–∏–Ω—É—Ç)",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.count_cars_5)


@router_finish.message(StateFilter(FSMFinishShift.remaining_tokens))
async def warning_remaining_tokens_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –∂–µ—Ç–æ–Ω–æ–≤",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.count_cars_5), F.text)
async def process_cars_5_command(message: Message, state: FSMContext):
    await state.update_data(count_cars_5=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–∞ –º–∞—à–∏–Ω–æ–∫ 10 –º–∏–Ω—É—Ç (20 –º–∏–Ω—É—Ç)",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.count_cars_10)


@router_finish.message(StateFilter(FSMFinishShift.count_cars_5))
async def warning_cars_5_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–∞ –º–∞—à–∏–Ω–æ–∫ 5 –º–∏–Ω—É—Ç (7 –º–∏–Ω—É—Ç)",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.count_cars_10), F.text)
async def process_cars_10_command(message: Message, state: FSMContext):
    await state.update_data(count_cars_10=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—É—Å–µ–ª–∏",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.count_carousel)


@router_finish.message(StateFilter(FSMFinishShift.count_cars_10))
async def warning_cars_10_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–∞ –º–∞—à–∏–Ω–æ–∫ 10 –º–∏–Ω—É—Ç (20 –º–∏–Ω—É—Ç)",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.count_carousel), F.text)
async def process_carousel_command(message: Message, state: FSMContext):
    await state.update_data(count_carousel=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –∑–∞ –¥–µ–Ω—å",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.count_master)


@router_finish.message(StateFilter(FSMFinishShift.count_carousel))
async def warning_carousel_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–∞—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—É—Å–µ–ª–∏",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.count_master), F.text)
async def process_master_class_command(message: Message, state: FSMContext):
    await state.update_data(count_master=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –¥–æ–ø.—Ç–æ–≤–∞—Ä–∞ –∑–∞ –¥–µ–Ω—å\n(—à–∞—Ä–∏–∫–∏, —Å–ª–∞–π–º—ã –∏ —Ç.–¥)",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.count_additional)


@router_finish.message(StateFilter(FSMFinishShift.count_master))
async def warning_master_class_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –∑–∞ –¥–µ–Ω—å",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.count_additional), F.text)
async def process_count_additional_command(message: Message, state: FSMContext):
    await state.update_data(count_additional=message.text)
    await message.answer(
        text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞ —Å–º–µ–Ω—É "
             "(—á–µ–∫–∏ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã, –æ–ø–ª–∞—Ç–∞ QR-–∫–æ–¥–∞, —á–µ–∫ —Ä–∞—Å—Ö–æ–¥–∞)",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMFinishShift.necessary_photos)


@router_finish.message(StateFilter(FSMFinishShift.count_additional))
async def warning_count_additional_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –¥–æ–ø.—Ç–æ–≤–∞—Ä–∞ –∑–∞ –¥–µ–Ω—å\n(—à–∞—Ä–∏–∫–∏, —Å–ª–∞–π–º—ã –∏ —Ç.–¥)",
        reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.necessary_photos))
async def process_necessary_photos_command(message: Message, state: FSMContext):
    if message.photo:
        if "necessary_photos" not in await state.get_data():
            await state.update_data(necessary_photos=[message.photo[-1].file_id])

        await message.answer(
            text="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–µ—Ç—Ä–∞–¥—å (–æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ)",
            reply_markup=await create_cancel_kb(),
        )
        await state.set_state(FSMFinishShift.photo_copybook)
    else:
        await message.answer(
            text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞ —Å–º–µ–Ω—É "
                 "(—á–µ–∫–∏ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã, –æ–ø–ª–∞—Ç–∞ QR-–∫–æ–¥–∞, —á–µ–∫ —Ä–∞—Å—Ö–æ–¥–∞)",
            reply_markup=await create_cancel_kb(),
    )


@router_finish.message(StateFilter(FSMFinishShift.photo_copybook))
async def process_photo_copybook_command(message: Message, state: FSMContext):
    if message.photo:
        if "photo_copybook" not in await state.get_data():
            await state.update_data(photo_copybook=[message.photo[-1].file_id])

        await message.answer(
            text="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É (–ø–ª–æ—â–∞–¥–∫—É) (1 —Ñ–æ—Ç–æ)",
            reply_markup=await create_cancel_kb(),
        )

        await state.set_state(FSMFinishShift.object_photo)
    else:
        await message.answer(
            text="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–µ—Ç—Ä–∞–¥—å (–æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ)",
            reply_markup=await create_cancel_kb(),
        )


@router_finish.message(StateFilter(FSMFinishShift.object_photo))
async def process_object_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "object_photo" not in await state.get_data():
            await state.update_data(object_photo=[message.photo[-1].file_id])

        finish_shift_dict = await state.get_data()

        try:
            day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
            current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {LEXICON_RU[day_of_week]}')

            DB.set_data(
                user_id=message.from_user.id,
                date=datetime.now(tz=timezone(timedelta(hours=3.0))).strftime("%Y.%m.%d"),
                place=finish_shift_dict["place"],
                cash=finish_shift_dict["summary"]
            )

            necessary_photos = [InputMediaPhoto(
                media=photo_file_id,
                caption="–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ –∑–∞ —Å–º–µ–Ω—É (—á–µ–∫–∏ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã, –æ–ø–ª–∞—Ç–∞ QR-–∫–æ–¥–∞, "
                        "—á–µ–∫ —Ä–∞—Å—Ö–æ–¥–∞)",
            ) for i, photo_file_id in enumerate(finish_shift_dict["necessary_photos"])]

            photos_copybook = [InputMediaPhoto(
                media=photo_file_id,
                caption="–§–æ—Ç–æ —Ç–µ—Ç—Ä–∞–¥–∏" if i == 0 else ""
            ) for i, photo_file_id in enumerate(finish_shift_dict["photo_copybook"])]

            photos_object = [InputMediaPhoto(
                media=photo_file_id,
                caption="–§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞" if i == 0 else ""
            ) for i, photo_file_id in enumerate(finish_shift_dict["object_photo"])]

            await message.bot.send_message(
                chat_id=place_chat[finish_shift_dict["place"]],
                text=await report(
                    dictionary=finish_shift_dict,
                    date=current_date,
                    user_id=message.from_user.id,
                )
            )

            await message.bot.send_media_group(
                media=necessary_photos,
                chat_id=place_chat[finish_shift_dict["place"]],
            )

            if "photo_of_beneficiaries" in finish_shift_dict:
                photo_of_beneficiaries = [InputMediaPhoto(
                    media=photo_file_id,
                    caption="–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ –ª—å–≥–æ—Ç–Ω–∏–∫–æ–≤",
                ) for i, photo_file_id in enumerate(finish_shift_dict["photo_of_beneficiaries"])]

                await message.bot.send_media_group(
                    media=photo_of_beneficiaries,
                    chat_id=place_chat[finish_shift_dict["place"]],
                )

            await message.bot.send_media_group(
                media=photos_copybook,
                chat_id=place_chat[finish_shift_dict["place"]],
            )

            await message.bot.send_media_group(
                media=photos_object,
                chat_id=place_chat[finish_shift_dict["place"]],
            )

            await message.answer(
                text="–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç...\n–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞—á–∞–ª—å—Å—Ç–≤—É!",
                reply_markup=ReplyKeyboardRemove(),
            )

        except Exception as e:
            await message.bot.send_message(
                text=f"Check attractions report error: {e}\n"
                     f"User_id: {message.from_user.id}",
                chat_id=config.admins[0],
                reply_markup=ReplyKeyboardRemove(),
            )
            await message.answer(
                text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
                reply_markup=ReplyKeyboardRemove(),
            )
        finally:
            await state.clear()
    else:
        await message.answer(
            text="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É (–ø–ª–æ—â–∞–¥–∫—É) (1 —Ñ–æ—Ç–æ)",
            reply_markup=await create_cancel_kb(),
        )

