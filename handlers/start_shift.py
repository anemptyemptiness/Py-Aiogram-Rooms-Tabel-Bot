from typing import Union
from datetime import datetime, timezone, timedelta

from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove, InputMediaPhoto, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext

from fsm.fsm import FSMStartShift
from keyboards.keyboards import create_cancel_kb, create_places_kb, create_agree_kb
from middleware.album_middleware import AlbumsMiddleware
from config.config import config, place_chat
from lexicon.lexicon_ru import LEXICON_RU, rules
from db import DB

router_start_shift = Router()
router_start_shift.message.middleware(middleware=AlbumsMiddleware(2))


async def report(report_dict: dict, date: str, user_id: Union[int, str]) -> str:
    return f"üìù–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã\n\n" \
           f"–î–∞—Ç–∞: {date}\n" \
           f"–¢–æ—á–∫–∞: {report_dict['place']}\n" \
           f"–ò–º—è: {DB.get_current_name(user_id)}\n"


@router_start_shift.message(Command(commands="start_shift"), StateFilter(default_state))
async def process_start_shift_command(message: Message, state: FSMContext):
    await state.set_state(FSMStartShift.place)
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É",
        reply_markup=await create_places_kb(),
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_ryzanka_room")
async def process_place_1_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–†—è–∑–∞–Ω–∫–∞ –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_ryzanka_square")
async def process_place_2_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–†—è–∑–∞–Ω–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_153_room")
async def process_place_3_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–õ-153 –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_153_square")
async def process_place_4_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–õ-153 –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_cloud_square")
async def process_place_5_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–û–±–ª–∞–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_dirt_room")
async def process_place_6_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ß–µ—Ä–Ω–∞—è –≥—Ä—è–∑—å –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_june_square")
async def process_place_7_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ò—é–Ω—å –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_park_kosino")
async def process_place_8_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ö–æ—Å–∏–Ω–æ –ø–∞—Ä–∫ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_city_kosino")
async def process_place_9_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ì–æ—Ä–æ–¥ –ö–æ—Å–∏–Ω–æ –∫–∞—Ä—É—Å–µ–ª—å+–ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_varskva_room")
async def process_place_10_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–í–∞—Ä—à–∞–≤—Å–∫–∏–π –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_ryazanka_tokens")
async def process_place_11_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ì–æ—Ä–æ–¥ –†—è–∑–∞–Ω–∫–∞ –ñ–µ—Ç–æ–Ω—ã")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_kosino_tokens")
async def process_place_12_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ö–æ—Å–∏–Ω–æ –ü–∞—Ä–∫ –ñ–µ—Ç–æ–Ω—ã")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_myakinino")
async def process_place_13_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ú—è–∫–∏–Ω–∏–Ω–æ")
    await callback.message.answer(
        text=f"{rules}",
        reply_markup=await create_agree_kb(),
        parse_mode="html",
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMStartShift.rules)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "cancel")
async def process_place_cancel_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove(),
    )
    await callback.answer(text="‚úÖ")
    await state.clear()


@router_start_shift.message(StateFilter(FSMStartShift.place))
async def warning_start_shift_command(message: Message):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ",
        reply_markup=await create_cancel_kb(),
    )


@router_start_shift.callback_query(StateFilter(FSMStartShift.rules), F.data == "agree")
async def process_rules_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–µ–±—è –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
    await state.set_state(FSMStartShift.my_photo)


@router_start_shift.message(StateFilter(FSMStartShift.rules))
async def warning_rules_command(message: Message):
    await message.answer(
        text="–í–∞–º –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤—ã—à–µ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–∏—è\n\n"
             '–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ <b>"–û—Ç–º–µ–Ω–∞"</b>'
             ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"</b> –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
        reply_markup=await create_cancel_kb(),
        parse_mode="html",
    )


@router_start_shift.message(StateFilter(FSMStartShift.my_photo), F.photo)
async def process_my_photo_command(message: Message, state: FSMContext):
    await state.update_data(my_photo=message.photo[-1].file_id)
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É (–ø–ª–æ—â–∞–¥–∫—É) —Å 3-—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n"
             "(—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMStartShift.object_photo)


@router_start_shift.message(StateFilter(FSMStartShift.my_photo))
async def warning_my_photo_command(message: Message):
    await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ")


@router_start_shift.message(StateFilter(FSMStartShift.object_photo), F.photo)
async def process_object_photo_command(message: Message, state: FSMContext, bot: Bot):
    if 'object_photo' not in await state.get_data():
        await state.update_data(object_photo=[message.photo[-1].file_id])

    try:
        start_shift_dict = await state.get_data()

        day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
        current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {LEXICON_RU[day_of_week]}')

        await message.bot.send_message(
            chat_id=place_chat[start_shift_dict['place']],
            text=await report(start_shift_dict, current_date, message.from_user.id),
        )

        await message.bot.send_photo(
            chat_id=place_chat[start_shift_dict['place']],
            photo=start_shift_dict['my_photo'],
            caption='–§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
        )

        object_photos = [InputMediaPhoto(
            media=photo_file_id,
            caption="–§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞" if i == 0 else ""
        ) for i, photo_file_id in enumerate(start_shift_dict['object_photo'])]

        await message.bot.send_media_group(
            chat_id=place_chat[start_shift_dict['place']],
            media=object_photos,
        )

        await message.answer(
            text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n"
                 "–ü–µ—Ä–µ–¥–∞—é —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –æ—Ç—á—ë—Ç...",
            reply_markup=ReplyKeyboardRemove(),
        )
    except Exception as e:
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
        await bot.send_message(
            chat_id=config.admins[0],
            text=f"Start shift report error:\n\n{e}",
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        await state.clear()


@router_start_shift.message(StateFilter(FSMStartShift.object_photo))
async def warning_object_photo_command(message: Message):
    await message.answer(
        text="–ù—É–∂–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!",
        reply_markup=await create_cancel_kb(),
    )
