from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, InputMediaPhoto, CallbackQuery
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from config.config import config
from fsm.fsm import FSMEncashment
from lexicon.lexicon_ru import LEXICON_RU
from keyboards.keyboards import create_cancel_kb, create_places_kb, create_yes_no_kb
from middleware.album_middleware import AlbumsMiddleware
from config.config import place_chat

router_encashment = Router()
router_encashment.message.middleware(middleware=AlbumsMiddleware(2))


async def report(dictionary: dict, date):
    return "üìù–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è:\n\n" \
           f"–¢–æ—á–∫–∞: {dictionary['place']}\n" \
           f"–î–∞—Ç–∞: {date}\n\n" \
           f"–î–∞—Ç–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏: {dictionary['date']}\n" \
           f"–°—É–º–º–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏: {dictionary['summary']}\n"


@router_encashment.message(Command(commands="encashment"), StateFilter(default_state))
async def process_place_command(message: Message, state: FSMContext):
    await state.set_state(FSMEncashment.place)
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å",
        reply_markup=await create_places_kb(),
    )


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_ryzanka_room")
async def process_place_1_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–†—è–∑–∞–Ω–∫–∞ –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_ryzanka_square")
async def process_place_2_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–†—è–∑–∞–Ω–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_153_room")
async def process_place_3_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–õ-153 –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_153_square")
async def process_place_4_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–õ-153 –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_cloud_square")
async def process_place_5_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–û–±–ª–∞–∫–∞ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_dirt_room")
async def process_place_6_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ß–µ—Ä–Ω–∞—è –≥—Ä—è–∑—å –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_june_square")
async def process_place_7_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ò—é–Ω—å –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_park_kosino")
async def process_place_8_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ö–æ—Å–∏–Ω–æ –ø–∞—Ä–∫ –ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_city_kosino")
async def process_place_9_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ì–æ—Ä–æ–¥ –ö–æ—Å–∏–Ω–æ –∫–∞—Ä—É—Å–µ–ª—å+–ø–ª–æ—â–∞–¥–∫–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_varskva_room")
async def process_place_10_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–í–∞—Ä—à–∞–≤—Å–∫–∏–π –∫–æ–º–Ω–∞—Ç–∞")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_ryazanka_tokens")
async def process_place_11_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ì–æ—Ä–æ–¥ –†—è–∑–∞–Ω–∫–∞ –ñ–µ—Ç–æ–Ω—ã")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_kosino_tokens")
async def process_place_12_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ö–æ—Å–∏–Ω–æ –ü–∞—Ä–∫ –ñ–µ—Ç–æ–Ω—ã")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "place_myakinino")
async def process_place_13_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ú—è–∫–∏–Ω–∏–Ω–æ")
    await callback.message.answer(
        text="–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å?",
        reply_markup=await create_yes_no_kb(),
    )
    await callback.answer(text="–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞")
    await state.set_state(FSMEncashment.encashment)


@router_encashment.callback_query(StateFilter(FSMEncashment.place), F.data == "cancel")
async def process_place_cancel_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove(),
    )
    await callback.answer(text="‚úÖ")
    await state.clear()


@router_encashment.message(StateFilter(FSMEncashment.place))
async def warning_place_command(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –Ω–∏–∂–µ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞",
        reply_markup=await create_cancel_kb(),
    )


@router_encashment.callback_query(StateFilter(FSMEncashment.encashment), F.data == "yes")
async def process_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_encashment="yes")
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —á–µ–∫",
        reply_markup=await create_cancel_kb(),
    )
    await callback.answer(text="‚úÖ")
    await state.set_state(FSMEncashment.photo_of_check)


@router_encashment.callback_query(StateFilter(FSMEncashment.encashment), F.data == "no")
async def process_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_encashment="no")

    encashment_dict = await state.get_data()

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {LEXICON_RU[day_of_week]}')

    try:
        await callback.message.bot.send_message(
            chat_id=place_chat[encashment_dict['place']],
            text="üìù–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è:\n\n"
                 f"–¢–æ—á–∫–∞: {encashment_dict['place']}\n"
                 f"–î–∞—Ç–∞: {date}\n\n"
                 "–ò–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ <b>–Ω–µ—Ç</b>",
            parse_mode="html")

        await callback.message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—á–∞–ª—å—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove())
        await callback.answer(text="‚úÖ")

    except Exception as e:
        await callback.message.bot.send_message(
            text=f"Encashment report error: {e}\n"
                 f"User_id: {callback.message.from_user.id}",
            chat_id=config.admins[0],
            reply_markup=ReplyKeyboardRemove())
        await callback.message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove())

    finally:
        await state.clear()


@router_encashment.callback_query(StateFilter(FSMEncashment.encashment), F.data == "cancel")
async def process_cancel_command(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove(),
    )
    await callback.answer("‚úÖ")


@router_encashment.message(StateFilter(FSMEncashment.encashment))
async def warning_yes_no_command(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ!")


@router_encashment.message(StateFilter(FSMEncashment.photo_of_check))
async def process_wait_for_check_command(message: Message, state: FSMContext):
    if message.photo:
        if 'photo_of_check' not in await state.get_data():
            await state.update_data(photo_of_check=[message.photo[-1].file_id])

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ —á–∏—Å–ª–æ–º",
            reply_markup=await create_cancel_kb(),
        )
        await state.set_state(FSMEncashment.summary)
    else:
        await message.answer(
            text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏",
            reply_markup=await create_cancel_kb(),
        )


@router_encashment.message(StateFilter(FSMEncashment.summary), F.text)
async def process_wait_for_summary_command(message: Message, state: FSMContext):
    await state.update_data(summary=message.text)
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –¥–µ–ª–∞–ª–∏ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏—é",
        reply_markup=await create_cancel_kb(),
    )
    await state.set_state(FSMEncashment.date_of_cash)


@router_encashment.message(StateFilter(FSMEncashment.summary))
async def warning_wait_for_summary_command(message: Message):
    await message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ —á–∏—Å–ª–æ–º!",
        reply_markup=await create_cancel_kb(),
    )


@router_encashment.message(StateFilter(FSMEncashment.date_of_cash), F.text)
async def process_wait_for_date_command(message: Message, state: FSMContext):
    await state.update_data(date=message.text)

    encashment_dict = await state.get_data()

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {LEXICON_RU[day_of_week]}')

    try:
        await message.bot.send_message(
            chat_id=place_chat[encashment_dict['place']],
            text=await report(
                dictionary=encashment_dict,
                date=date
            ),
        )

        if not isinstance(encashment_dict['photo_of_check'], str):
            media_check = [InputMediaPhoto(
                media=photo_file_id,
                caption="–§–æ—Ç–æ —á–µ–∫–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏" if i == 0 else "")
                for i, photo_file_id in enumerate(encashment_dict['photo_of_check'])]
            await message.bot.send_media_group(
                chat_id=place_chat[encashment_dict['place']],
                media=media_check,
            )

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—á–∞–ª—å—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    except Exception as e:
        await message.bot.send_message(
            text=f"Encashment report error: {e}\n"
                 f"User_id: {message.from_user.id}",
                 chat_id=config.admins[0],
                 reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        await state.clear()


@router_encashment.message(StateFilter(FSMEncashment.date_of_cash))
async def warning_wait_for_date_command(message: Message):
    await message.answer(
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏!",
        reply_markup=await create_cancel_kb(),
    )
